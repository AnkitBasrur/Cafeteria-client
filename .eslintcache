[{"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\index.js":"1","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\reportWebVitals.js":"2","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Sales.js":"3","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\OrderMenu.js":"4","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\App.js":"5","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Pay.js":"6","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\WaitingList.js":"7","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\ChefView.js":"8","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\NavBar.js":"9","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\TableView.js":"10","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Home.js":"11","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Menu.js":"12","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\CheckItem.js":"13","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\ViewCheck.js":"14","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\theme.js":"15","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Order.js":"16"},{"size":620,"mtime":1662575450299,"results":"17","hashOfConfig":"18"},{"size":375,"mtime":1627385348175,"results":"19","hashOfConfig":"18"},{"size":5766,"mtime":1627385348173,"results":"20","hashOfConfig":"18"},{"size":3736,"mtime":1659080281210,"results":"21","hashOfConfig":"18"},{"size":2476,"mtime":1662577726452,"results":"22","hashOfConfig":"18"},{"size":6384,"mtime":1627385348173,"results":"23","hashOfConfig":"18"},{"size":10106,"mtime":1659112630893,"results":"24","hashOfConfig":"18"},{"size":5198,"mtime":1659367772812,"results":"25","hashOfConfig":"18"},{"size":982,"mtime":1627385348172,"results":"26","hashOfConfig":"18"},{"size":6277,"mtime":1659158104736,"results":"27","hashOfConfig":"18"},{"size":4337,"mtime":1659183187165,"results":"28","hashOfConfig":"18"},{"size":11998,"mtime":1659182466872,"results":"29","hashOfConfig":"18"},{"size":6239,"mtime":1659182189477,"results":"30","hashOfConfig":"18"},{"size":1976,"mtime":1627385348174,"results":"31","hashOfConfig":"18"},{"size":353,"mtime":1627385348176,"results":"32","hashOfConfig":"18"},{"size":9601,"mtime":1659181842469,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1b26opr",{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"38"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"42"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"49"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"52","usedDeprecatedRules":"42"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"57"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64","usedDeprecatedRules":"42"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73","usedDeprecatedRules":"42"},"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\index.js",["74"],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\reportWebVitals.js",[],["75","76"],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Sales.js",["77"],"import React, {useState, useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Box from '@material-ui/core/Box';\r\n\r\nfunction Sales(props){\r\n    const [sales, setSales] = useState()\r\n    const menus = JSON.parse(localStorage.getItem(\"menu\") || \"[]\" );\r\n    var num = 0;\r\n    var items = 0;\r\n    var profit = 0;\r\n    useEffect(() => {\r\n            const menuData = menus;\r\n            menuData.sort(function(a, b) {\r\n                return b.profit - a.profit;\r\n            });\r\n            setSales(menuData)\r\n    }, [])\r\n    const useStyles = makeStyles({\r\n        image: {\r\n            width: 100,\r\n            height: 100\r\n          },\r\n          cell: {\r\n            padding: 2\r\n          }\r\n      });\r\n    const classes = useStyles();\r\n\r\n    if(sales)\r\n    return(\r\n        <div>\r\n            <TableContainer component={Paper}>\r\n                <Table className={classes.table} aria-label=\"spanning table\" style={{padding:\"0px\",width:\"90%\"}}>\r\n                    <TableHead >\r\n                    <TableRow  className=\"sale\">\r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Ranking</Typography></TableCell>\r\n                        <TableCell  align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Item Name</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Item Image</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Total Sold</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Sale Price</Typography></TableCell>                        \r\n                        <TableCell align=\"center\" style={{width:\"10%\"}}><Typography style={{ fontWeight: 600 }} variant=\"h5\">Cost</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Profit</Typography></TableCell>\r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                {sales.map((row)=>{\r\n                    num = num+1;\r\n                    profit += row.profit\r\n                    items += row.totalSales\r\n                    \r\n                    return (\r\n                        <TableRow key={row.name}>\r\n                            <TableCell align=\"center\"><Typography variant=\"h6\">{num}</Typography></TableCell>\r\n                            <TableCell align=\"center\"><Typography variant=\"h6\">{row.name}</Typography></TableCell>\r\n                            <TableCell align=\"center\" className={classes.cell}>\r\n                                <Box display=\"flex\" justifyContent=\"center\" bgcolor=\"background.paper\">\r\n                                <Avatar\r\n                                    variant=\"rounded\"\r\n                                    className={classes.image}\r\n                                    src={row.imageUrl}\r\n                                    alt=\"\"\r\n                                />\r\n                                </Box>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\"><Typography variant=\"h6\">{row.totalSales}</Typography></TableCell>\r\n                            <TableCell align=\"center\"><Typography variant=\"h6\">Rs. {row.salePrice}</Typography></TableCell>\r\n                            <TableCell align=\"center\"><Typography variant=\"h6\">Rs. {row.costPrice}</Typography></TableCell>\r\n                            <TableCell align=\"center\"><Typography variant=\"h6\">Rs. {row.profit}</Typography></TableCell>\r\n                        </TableRow>\r\n                    );\r\n                })}\r\n                <TableRow >\r\n                    <TableCell rowSpan={2} />\r\n                    <TableCell rowSpan={2} />\r\n                    <TableCell rowSpan={2} />\r\n                    <TableCell rowSpan={2} />\r\n                    <TableCell colSpan={2}>\r\n                        <Typography variant=\"h5\" color=\"secondary\">\r\n                        Total Items Sold\r\n                        </Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                        <Typography variant=\"h5\" color=\"primary\">\r\n                        {items}\r\n                        </Typography>\r\n                    </TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                    <TableCell colSpan={2}>\r\n                        <Typography variant=\"h5\" color=\"secondary\">\r\n                        Total Profit\r\n                        </Typography>\r\n                    </TableCell>\r\n                    <TableCell align=\"center\">\r\n                        <Typography variant=\"h5\" color=\"primary\">\r\n                        Rs. {profit}\r\n                        </Typography>\r\n                    </TableCell>\r\n                    </TableRow>\r\n            \r\n                </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n        </div>\r\n\r\n    )\r\n    else\r\n        return(\r\n            <div>\r\n                <h1>Loading</h1>\r\n            </div>\r\n)\r\n}\r\n\r\n\r\nexport default Sales;",["78","79"],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\OrderMenu.js",[],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\App.js",[],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Pay.js",[],["80","81"],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\WaitingList.js",["82","83","84"],"import React,{useEffect} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport Button from '@material-ui/core/Button';\r\nimport axios from 'axios';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport PersonIcon from '@material-ui/icons/Person';\r\nimport CommentIcon from '@material-ui/icons/Comment';\r\nimport GroupIcon from '@material-ui/icons/Group';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst { REACT_APP_BACKEND_CONN } = process.env;\r\n\r\nfunction WaitingList(props) {\r\n\r\n    const [users,setUsers] = React.useState([]);\r\n    const [name,setName] = React.useState('');\r\n    const [partySize,setPartySize] = React.useState('');\r\n    const [comments,setComments] = React.useState('');\r\n    const [shouldFetch,setShouldFetch] = React.useState(true)\r\n    const [shouldAllowSelect,setShouldAllowSelect] = React.useState(false);\r\n\r\n    const onSubmit = (e) => {\r\n        e.preventDefault();\r\n\r\n        if(!name || !partySize)\r\n            return;\r\n        var date, TimeType, hour, minutes, fullTime;\r\n        date = new Date();\r\n        hour = date.getHours(); \r\n        if(hour <= 11)\r\n            TimeType = 'AM';\r\n        else\r\n            TimeType = 'PM';\r\n        if( hour > 12 )\r\n            hour = hour - 12;\r\n        if( hour === 0 )\r\n            hour = 12;\r\n    \r\n        minutes = date.getMinutes();\r\n        if(minutes < 10)\r\n            minutes = '0' + minutes.toString();\r\n        \r\n        fullTime = hour.toString() + ':' + minutes.toString() +' '+ TimeType.toString();\r\n        axios.get(`${REACT_APP_BACKEND_CONN}/counter`).then((res)=>{\r\n            var count = parseInt(res.data.count)+1;\r\n            const custData = {\r\n                name: name,\r\n                partySize: partySize,\r\n                comments: comments,\r\n                id:count,\r\n                time:fullTime\r\n            }\r\n            axios.put(`${REACT_APP_BACKEND_CONN}/waiting-list/`,{custData}).then(()=>                \r\n              axios.put(`${REACT_APP_BACKEND_CONN}/counter/${count}`).then(()=> {\r\n                setPartySize('');\r\n                setComments('');\r\n                setName('')\r\n                setShouldFetch(true);\r\n              })\r\n            )})\r\n        \r\n    }\r\n    function seatFunction(data){\r\n\r\n    var date, TimeType, hour, minutes, fullTime;\r\n    date = new Date();\r\n    hour = date.getHours(); \r\n    if(hour <= 11)\r\n      TimeType = 'AM';\r\n    else\r\n      TimeType = 'PM';\r\n    if( hour > 12 )\r\n      hour = hour - 12;\r\n    if( hour === 0 )\r\n        hour = 12;\r\n\r\n    minutes = date.getMinutes();\r\n    if(minutes < 10)\r\n      minutes = '0' + minutes.toString();\r\n   \r\n    fullTime = hour.toString() + ':' + minutes.toString() +' '+ TimeType.toString();\r\n\r\n    axios.delete(`${REACT_APP_BACKEND_CONN}/waiting-list/${data.id}`).then(()=>{\r\n        axios.put(`${REACT_APP_BACKEND_CONN}/tables/`,{\r\n            isEmpty: false,\r\n            name: data.name,\r\n            order:[],\r\n            tableID:props.table,\r\n            capacity:props.capacity,\r\n            viewCheck:false,\r\n            foodStatus: \"Request Received\",\r\n            time: fullTime,\r\n            checkID:data.id,\r\n            tempOrder:[],\r\n        }).then(()=>{\r\n          axios.get(`${REACT_APP_BACKEND_CONN}/tables`)\r\n              .then(res => {\r\n                localStorage.setItem(\"tableData\",JSON.stringify(res.data));\r\n                props.selectUser()\r\n                props.onChildClick()\r\n                setShouldFetch(true)\r\n              })\r\n        })\r\n    })\r\n    }\r\n    useEffect(() => {\r\n        const fetchUsers = async() =>{\r\n            if(props.shouldAllowSelect){\r\n                axios.get(`${REACT_APP_BACKEND_CONN}/waiting-list/${props.capacity}`)\r\n                    .then(res => {\r\n                    setUsers(res.data)\r\n                })\r\n            }\r\n            else{\r\n                axios.get(`${REACT_APP_BACKEND_CONN}/waiting-list/0`)\r\n                    .then(res => {\r\n                      setUsers(res.data)\r\n                })\r\n            }\r\n            setShouldFetch(false)\r\n        }\r\n        if(shouldFetch){\r\n            setShouldAllowSelect(props.shouldAllowSelect)\r\n            fetchUsers()\r\n        }\r\n    }, [shouldFetch])\r\n\r\n    const useStyles = makeStyles({\r\n        image: {\r\n            width: 100,\r\n            height: 100\r\n          },\r\n          cell: {\r\n            padding: 2\r\n          },\r\n          root: {\r\n            '& > *': {\r\n              margin: \"1%\",\r\n              width: '25ch',\r\n            },\r\n          },\r\n      });\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <>\r\n        <div className=\"rows\">\r\n            <div className=\" mainMenu\">\r\n                <TableContainer component={Paper}>\r\n                    <Table className={classes.table} aria-label=\"spanning table\" style={{padding:\"0px\",width:\"90%\"}}>\r\n                        <TableHead >\r\n                        <TableRow  className=\"sale\">\r\n                            <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">ID</Typography></TableCell>\r\n                            <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Name</Typography></TableCell>\r\n                            <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Group Size</Typography></TableCell>\r\n                            <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Arrival Time</Typography></TableCell>\r\n                            <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Comments</Typography></TableCell>    \r\n                            <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Seat Customer</Typography></TableCell>                                            \r\n                        </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                    {users.map((row)=>{\r\n                        if(row!==undefined)\r\n                        return (\r\n                            <TableRow key={row.name}>\r\n                                <TableCell align=\"center\"><Typography variant=\"h6\">{row.id}</Typography></TableCell>\r\n                                <TableCell align=\"center\"><Typography variant=\"h6\">{row.name}</Typography></TableCell>\r\n                                <TableCell align=\"center\"><Typography variant=\"h6\">{row.partySize}</Typography></TableCell>\r\n                                <TableCell align=\"center\"><Typography variant=\"h6\">{row.time}</Typography></TableCell>\r\n                                <TableCell align=\"center\"><Typography variant=\"h6\">{row.comments}</Typography></TableCell>\r\n                                {shouldAllowSelect ? (\r\n                        <TableCell align=\"center\"><Button style={{align:\"center\"}} variant=\"contained\" onClick={() => seatFunction({id:row.id,name:row.name})}>Select</Button></TableCell>\r\n      ) : (\r\n        <TableCell align=\"center\"><Button style={{align:\"center\"}} variant=\"contained\" disabled>Select</Button></TableCell>\r\n      )} \r\n      </TableRow>\r\n                        );\r\n                    })}\r\n                \r\n                    </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n            </div>\r\n            <div className=\"addMenu\">\r\n                <h1>Add New Customer</h1>\r\n                <form className={classes.root} onSubmit={onSubmit} className=\"form\">\r\n                <TextField\r\n              margin=\"normal\"\r\n              className=\"input-field\"\r\n              label=\"Enter Customer Name\"\r\n              variant=\"outlined\"\r\n              name=\"custName\"\r\n              value={name}\r\n              style={{textAlign:\"right\",width:\"100%\",backgroundColor:\"white\"}}\r\n              onInput={ e=>setName(e.target.value)}\r\n              required\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <PersonIcon />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              className=\"input-field\"\r\n              label=\"Enter Group Size\"\r\n              variant=\"outlined\"\r\n              name=\"grpSize\"\r\n              value={partySize}\r\n              style={{textAlign:\"right\",width:\"100%\",backgroundColor:\"white\"}}\r\n              onInput={ e=>setPartySize(e.target.value)}\r\n              required\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <GroupIcon />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              className=\"input-field\"\r\n              label=\"Enter Comments\"\r\n              variant=\"outlined\"\r\n              name=\"comments\"\r\n              value={comments}\r\n              style={{textAlign:\"right\",width:\"100%\",backgroundColor:\"white\"}}\r\n              onInput={ e=>setComments(e.target.value)}\r\n              required\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <CommentIcon />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n\r\n                    <Button onClick={onSubmit} variant=\"contained\" style={{marginTop:\"5%\",marginLeft:\"30%\"}}>Submit</Button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default WaitingList;","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\ChefView.js",[],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\NavBar.js",[],["85","86"],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\TableView.js",[],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Home.js",[],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Menu.js",["87"],"import React,{useEffect} from 'react';\r\nimport { app } from './base';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport Box from '@material-ui/core/Box';\r\nimport Button from '@material-ui/core/Button';\r\nimport LocalAtmIcon from '@material-ui/icons/LocalAtm';\r\nimport RestaurantMenuIcon from '@material-ui/icons/RestaurantMenu';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport InputAdornment from '@material-ui/core/InputAdornment';\r\nimport MoneyIcon from '@material-ui/icons/Money';\r\nimport axios from 'axios';\r\nimport { v4 as uuidv4 } from 'uuid';\r\n\r\n\r\nconst { REACT_APP_BACKEND_CONN } = process.env;\r\n\r\nfunction Menu(props) {\r\n    const [fileUrl,setFileUrl] = React.useState('');\r\n    const [fileName,setFileName] = React.useState('');\r\n    const [menu,setMenu] = React.useState([]);\r\n    const [dishName,setDishName] = React.useState(\"\");\r\n    const [salePrice,setSalePrice] = React.useState('');\r\n    const [costPrice,setCostPrice] = React.useState('');\r\n    const [shouldFetch,setShouldFetch] = React.useState(true);\r\n    const [uploading,setUploading] = React.useState(false);\r\n    const [edit, setEdit] = React.useState('');\r\n    const [clickedID, setClickedID] = React.useState('');\r\n\r\n    var count = 0;\r\n    const onFileChange = async (e) => {\r\n        setFileName(e.target.value);\r\n        setUploading(true);\r\n        const file = e.target.files[0];\r\n        const storageRef = app.storage().ref();\r\n        const fileRef = storageRef.child(file.name);\r\n        await fileRef.put(file);\r\n        setFileUrl(await fileRef.getDownloadURL())\r\n        setUploading(false)\r\n    }\r\n    function onSubmit(e) {\r\n        e.preventDefault();\r\n        if(!dishName || !salePrice || !costPrice || !fileUrl)\r\n            return;\r\n        const menuData = {\r\n            name: dishName,\r\n            imageUrl: fileUrl,\r\n            salePrice: salePrice,\r\n            costPrice: costPrice,\r\n            totalSales:0,\r\n            id: ''\r\n        }\r\n\r\n        if(edit.length > 0){\r\n          menuData.id = clickedID;\r\n          axios.put(`${REACT_APP_BACKEND_CONN}/update-menu`,{menuData}).then(()=>{\r\n            axios.get(`${REACT_APP_BACKEND_CONN}/menu`)\r\n              .then(res => {\r\n                localStorage.setItem(\"menu\",JSON.stringify(res.data));\r\n                setShouldFetch(true)\r\n                setDishName('');\r\n                setSalePrice('');\r\n                setCostPrice('');\r\n                setFileUrl('')\r\n                setFileName('')\r\n                setEdit('')\r\n              })\r\n          })\r\n        }\r\n        else{\r\n          menuData.id = uuidv4();\r\n          axios.put(`${REACT_APP_BACKEND_CONN}/add-menu`,{menuData}).then(()=>{\r\n            axios.get(`${REACT_APP_BACKEND_CONN}/menu`)\r\n              .then(res => {\r\n                localStorage.setItem(\"menu\",JSON.stringify(res.data));\r\n                setShouldFetch(true)\r\n                setDishName('');\r\n                setSalePrice('');\r\n                setCostPrice('');\r\n                setFileUrl('')\r\n                setFileName('')\r\n              })\r\n          })\r\n        }\r\n    }\r\n    function editClick(idx,name,price,costPrice,url,id){\r\n      setDishName(name)\r\n      setCostPrice(costPrice)\r\n      setSalePrice(price)\r\n      setFileUrl(url)\r\n      setFileName(name)\r\n      setEdit(idx+'')\r\n      setClickedID(id+'')\r\n    }\r\n    function deleteClick(id){\r\n      axios.delete(`${REACT_APP_BACKEND_CONN}/${id}`).then(()=>{\r\n          axios.get(`${REACT_APP_BACKEND_CONN}/menu`)\r\n            .then(res => {\r\n              localStorage.setItem(\"menu\",JSON.stringify(res.data));\r\n              setShouldFetch(true)\r\n            })\r\n      })\r\n    }\r\n    useEffect(() => {\r\n        const fetchMenu = async() =>{\r\n            setMenu(JSON.parse(localStorage.getItem(\"menu\") || \"[]\" ));\r\n            setShouldFetch(false)\r\n        }\r\n        if(shouldFetch){\r\n            fetchMenu()\r\n        }\r\n    }, [shouldFetch])\r\n    const useStyles = makeStyles({\r\n        image: {\r\n            width: 100,\r\n            height: 100\r\n          },\r\n          cell: {\r\n            padding: 2\r\n          },\r\n          title: {\r\n            padding: 2\r\n          },\r\n          form: {\r\n            margin: 0\r\n          },\r\n          upload: {\r\n            display: 'none'\r\n          },\r\n          uploadBtn: {\r\n            width: \"80%\",\r\n          },\r\n          button: {\r\n            padding: 1,\r\n            height : \"200%\"\r\n          },\r\n          imageName: {\r\n            padding: 1,\r\n            fontStyle: 'italic',\r\n            color: 'gray'\r\n          }\r\n      });\r\n    const classes = useStyles();\r\n    return (\r\n        <div className=\"rows\">\r\n            <div className=\" mainMenu\">\r\n            <TableContainer style={{overflow: 'hidden'}} component={Paper}>\r\n                <Table className={classes.table} aria-label=\"spanning table\" style={{ padding:\"0px\",width:\"95%\"}}>\r\n                    <TableHead >\r\n                    <TableRow  className=\"sale\">\r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Sr. No</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Item Name</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Item Image</Typography></TableCell>\r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Sale Price</Typography></TableCell>  \r\n                        <TableCell align=\"center\"><Typography style={{ fontWeight: 600 }} variant=\"h5\">Edit</Typography></TableCell>                        \r\n                    </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                    {menu.map((row,idx)=>{\r\n                        count++;\r\n                        return (\r\n                            <TableRow key={idx}>\r\n                            <TableCell align=\"center\"><Typography variant=\"h6\">{count}</Typography></TableCell>\r\n                            <TableCell align=\"center\"><Typography variant=\"h6\">{row.name}</Typography></TableCell>\r\n                            <TableCell align=\"center\" className={classes.cell}>\r\n                                <Box display=\"flex\" justifyContent=\"center\" bgcolor=\"background.paper\">\r\n                                <Avatar\r\n                                    variant=\"rounded\"\r\n                                    className={classes.image}\r\n                                    src={row.imageUrl}\r\n                                    alt=\"\"\r\n                                />\r\n                                </Box>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\"><Typography variant=\"h6\">Rs. {row.salePrice}</Typography></TableCell>\r\n                            <TableCell className=\"edit-icons\">\r\n                                <EditIcon className=\"edit-icon icon\" onClick={()=>editClick(idx,row.name,row.salePrice,row.costPrice,row.imageUrl,row.id)}></EditIcon>\r\n                                <DeleteIcon className=\"delete-icon icon\" onClick={()=>deleteClick(row.id)}></DeleteIcon>\r\n                            </TableCell>\r\n                        </TableRow>\r\n                        );\r\n                    })}\r\n                    \r\n                </TableBody>\r\n                    </Table>\r\n                    </TableContainer>\r\n            </div>\r\n            <div className=\" addMenu\">\r\n                <h1>Add New Menu</h1>\r\n                <div className=\"input-icons\">\r\n                <form onSubmit={onSubmit} className=\"form\">\r\n                <TextField\r\n              margin=\"normal\"\r\n              className=\"input-field\"\r\n              label=\"Dish Name\"\r\n              variant=\"outlined\"\r\n              name=\"dishName\"\r\n              style={{textAlign:\"right\",width:\"100%\",backgroundColor:\"white\"}}\r\n              onInput={ e=>setDishName(e.target.value)}\r\n              required\r\n              value={dishName}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <RestaurantMenuIcon />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n                    <TextField\r\n              margin=\"normal\"\r\n              className=\"input-field\"\r\n              label=\"Sale Price\"\r\n              variant=\"outlined\"\r\n              name=\"dishName\"\r\n              style={{textAlign:\"right\",width:\"100%\",backgroundColor:\"white\"}}\r\n              onInput={ e=>setSalePrice(e.target.value)}\r\n              required\r\n              value={salePrice}\r\n              name=\"salePrice\"\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <MoneyIcon />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n            <TextField\r\n              margin=\"normal\"\r\n              className=\"input-field\"\r\n              label=\"Cost Price\"\r\n              variant=\"outlined\"\r\n              name=\"costPrice\"\r\n              style={{textAlign:\"right\",width:\"100%\",backgroundColor:\"white\"}}\r\n              onInput={ e=>setCostPrice(e.target.value)}\r\n              value={costPrice}\r\n              required\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">\r\n                    <LocalAtmIcon />\r\n                  </InputAdornment>\r\n                )\r\n              }}\r\n            />\r\n            <Box mt={2}>\r\n              <input\r\n                className={classes.upload}\r\n                accept=\"image/*\"\r\n                onChange = {onFileChange}\r\n                id=\"image\"\r\n                name=\"image\"\r\n                type=\"file\"\r\n              />\r\n              <label htmlFor=\"image\">\r\n                <Button\r\n                  className={classes.uploadBtn}\r\n                  variant=\"outlined\"\r\n                  color=\"default\"\r\n                  component=\"span\"\r\n                  size=\"large\"\r\n                  fullWidth\r\n                >\r\n                  Menu Image Upload\r\n                </Button>\r\n                <Typography\r\n                  variant=\"caption\"\r\n                  display=\"block\"\r\n                  className={classes.imageName}\r\n                >\r\n                {fileName}\r\n                </Typography>\r\n              </label>\r\n            </Box>\r\n            {uploading ? (\r\n                <Typography color=\"secondary\">Uploading...</Typography> ) : (\r\n                  fileName.length>0?(<Typography color=\"secondary\"> Uploaded Successfully</Typography>):<Typography color=\"secondary\">No image uploaded</Typography>  )\r\n            } \r\n            {uploading ? (\r\n              <Button onClick={onSubmit} variant=\"contained\" style={{marginTop:\"5%\",marginLeft:\"30%\"}} disabled>Submit</Button> ) : ( \r\n                fileName.length>0  ? (<Button onClick={onSubmit} variant=\"contained\" style={{marginTop:\"5%\",marginLeft:\"30%\"}} >Submit</Button> ):( \r\n                  <Button onClick={onSubmit} variant=\"contained\" style={{marginTop:\"5%\",marginLeft:\"30%\"}} disabled>Submit</Button> ))\r\n            } \r\n                </form>\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n\r\nexport default Menu;","D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\CheckItem.js",["88","89"],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\ViewCheck.js",[],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\theme.js",[],"D:\\Ankit\\proj\\Restaurant-MERN\\client\\src\\Order.js",["90"],"import Table from '@material-ui/core/Table';\r\nimport TableBody from '@material-ui/core/TableBody';\r\nimport TableCell from '@material-ui/core/TableCell';\r\nimport TableContainer from '@material-ui/core/TableContainer';\r\nimport TableHead from '@material-ui/core/TableHead';\r\nimport TableRow from '@material-ui/core/TableRow';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport React from 'react';\r\nimport axios from 'axios';\r\nimport Pay from './Pay';\r\nimport OrderMenu from './OrderMenu';\r\nimport Button from '@material-ui/core/Button';\r\nimport AddSharpIcon from '@material-ui/icons/AddSharp';\r\nimport RemoveSharpIcon from '@material-ui/icons/RemoveSharp';\r\nimport { Typography } from '@material-ui/core';\r\n\r\nconst { REACT_APP_BACKEND_CONN } = process.env;\r\n\r\nfunction Order(props){\r\n    const [orders,setOrders] = React.useState(JSON.parse(localStorage.getItem(\"order\") || \"[]\"));\r\n    const [renderPay,setRenderPay] = React.useState(false);\r\n    const [isRefresh,setIsRefresh] = React.useState(false);\r\n    const [isValid,setIsValid] = React.useState(false);\r\n    const [clickMenu,setClickMenu] = React.useState(false);\r\n    const [len,setLen] = React.useState(0);\r\n\r\n    var val = 0;\r\n    React.useEffect(() => {\r\n        const fetchUsers = async() =>{\r\n            if (props.location.table) {\r\n                localStorage.setItem(\"isBilled\",props.location.isBilled);\r\n                localStorage.setItem(\"table\",props.location.table);\r\n            }\r\n            var tableData = JSON.parse(localStorage.getItem(\"tableData\") || \"[]\" );\r\n            var currTab = tableData[localStorage.getItem(\"table\")-1];\r\n\r\n                localStorage.setItem(\"users\",JSON.stringify(currTab));\r\n                localStorage.setItem(\"time\",JSON.stringify(currTab.time));\r\n                localStorage.setItem(\"checkID\",JSON.stringify(currTab.checkID));\r\n                localStorage.setItem(\"name\",JSON.stringify(currTab.name));\r\n\r\n                if(JSON.parse(localStorage.getItem(\"isBilled\")) === true){\r\n                    localStorage.setItem(\"order\",JSON.stringify(currTab.order));\r\n                    setOrders(JSON.parse(localStorage.getItem(\"order\") || \"[]\"));\r\n                    setClickMenu(false)\r\n                    setIsValid(false)\r\n                    setLen(currTab.order.length);\r\n                }\r\n                else{\r\n                    localStorage.setItem(\"order\",JSON.stringify(currTab.tempOrder));\r\n                    setOrders(JSON.parse(localStorage.getItem(\"order\") || \"[]\"))\r\n                    setClickMenu(true)\r\n                    setLen(currTab.tempOrder.length);\r\n                    if(currTab.tempOrder.length>0)\r\n                        setIsValid(true)\r\n                }\r\n                \r\n            if(JSON.parse(localStorage.getItem(\"isBilled\")) === true)\r\n                setIsValid(false)\r\n            setIsRefresh(true);\r\n        }\r\n        if(!isRefresh){\r\n            fetchUsers()\r\n        }\r\n    }, [props,isRefresh])\r\n\r\n    function handleRefresh(){\r\n        setIsRefresh(false);        \r\n    }\r\n    function handleAdd(name,id){\r\n        if(JSON.parse(localStorage.getItem(\"isBilled\")) === true)\r\n            return;\r\n        var tableData = JSON.parse(localStorage.getItem(\"tableData\") || \"[]\" );\r\n        var currTab = tableData[localStorage.getItem(\"table\")-1];\r\n        var data = currTab.tempOrder;\r\n        for(var i=0;i<data.length;i++){\r\n            if(data[i].id === id){\r\n                data[i].quantity += 1;\r\n                break;\r\n            }\r\n        }\r\n\r\n        axios.put(`${REACT_APP_BACKEND_CONN}/tables`,{\r\n            tableID:localStorage.getItem(\"table\"),\r\n            tempOrder:data\r\n        })\r\n        .then(()=>{\r\n            axios.get(`${REACT_APP_BACKEND_CONN}/tables`)\r\n            .then(res => {\r\n                localStorage.setItem(\"tableData\",JSON.stringify(res.data));\r\n                setIsRefresh(false)\r\n            });\r\n        })\r\n    }\r\n    function handleSub(name){\r\n        if(JSON.parse(localStorage.getItem(\"isBilled\")) === true)\r\n            return;\r\n        var tableData = JSON.parse(localStorage.getItem(\"tableData\") || \"[]\" );\r\n        var currTab = tableData[localStorage.getItem(\"table\")-1];\r\n            var data = currTab.tempOrder;\r\n            for(var i=0;i<data.length;i++){\r\n                if(data[i].dish === name){\r\n                    data[i].quantity -= 1;\r\n                    if(data[i].quantity === 0){\r\n                        data = data.filter((d) => d.dish !== name);\r\n                        setLen(len-1);\r\n                        if(len<0)\r\n                            setIsValid(false)\r\n                    }\r\n                }\r\n            }\r\n            axios.put(`${REACT_APP_BACKEND_CONN}/tables`,{\r\n                tableID:localStorage.getItem(\"table\"),\r\n                tempOrder:data\r\n            }).then(()=>{\r\n                axios.get(`${REACT_APP_BACKEND_CONN}/tables`)\r\n                .then(res => {\r\n                  localStorage.setItem(\"tableData\",JSON.stringify(res.data));\r\n                  setIsRefresh(false)\r\n                })\r\n            });\r\n    }\r\n\r\n      function ccyFormat(num) {\r\n        var total = 0.05*num;\r\n        return Math.ceil(total)\r\n      }\r\n\r\n    if(!renderPay)\r\n    return(\r\n        <div className=\"main\">\r\n        <div className=\"homeRow\">\r\n            <div className=\"homeCol\">\r\n                <OrderMenu allowClick={clickMenu} refresh={handleRefresh} />\r\n            </div>\r\n            <div style={{width:\"60%\"}} className=\"orderCol\">\r\n                <Typography variant=\"h5\" display=\"inline\">Table </Typography><Typography variant=\"h5\" display=\"inline\" color=\"secondary\">{ localStorage.getItem(\"table\") }</Typography><br />\r\n                <Typography variant=\"h5\" display=\"inline\">Order of: </Typography><Typography variant=\"h5\" display=\"inline\" color=\"secondary\">{ JSON.parse(localStorage.getItem(\"name\")) }</Typography>\r\n\r\n                <TableContainer style={{overflow:\"hidden\", width:\"95%\",marginTop:\"2%\"}} component={Paper}>\r\n                    <Table style={{width:\"95%\"}} aria-label=\"spanning table\">\r\n                        <TableHead>\r\n                            <TableRow>\r\n                                <TableCell><Typography style={{ fontWeight: 600 }} variant=\"h5\">Dish Name</Typography></TableCell>\r\n                                <TableCell ><Typography style={{ fontWeight: 600 }} variant=\"h5\">Quantity</Typography></TableCell>\r\n                                <TableCell ><Typography style={{ fontWeight: 600 }} variant=\"h5\">Total</Typography></TableCell>\r\n                            </TableRow>\r\n                        </TableHead>\r\n                        <TableBody>\r\n                    \r\n                {orders.map((user,i)=>{\r\n                        if(user){\r\n                            val = val+parseInt(user.salePrice)*parseInt(user.quantity)\r\n                            return (\r\n                                <TableRow key={i}>\r\n                                    <TableCell><Typography variant=\"h6\">{user.dish}</Typography></TableCell>\r\n                                    <TableCell ><AddSharpIcon className=\"iconAdd\"  onClick={()=>handleAdd(user.dish,user.id)}></AddSharpIcon><Typography variant=\"h6\" display=\"inline\">{user.quantity}</Typography><RemoveSharpIcon className=\"iconRem\" onClick={()=>handleSub(user.dish)}></RemoveSharpIcon></TableCell>\r\n                                    <TableCell ><Typography variant=\"h6\">Rs. {user.salePrice*user.quantity}</Typography></TableCell>\r\n                                </TableRow>\r\n                                \r\n                            );\r\n                        }\r\n                        return null\r\n                    })}\r\n                    <TableRow>\r\n                        <TableCell rowSpan={3} />\r\n                        <TableCell colSpan={1}><Typography color=\"secondary\" variant=\"h5\">Subtotal</Typography></TableCell>\r\n                        <TableCell><Typography color=\"primary\" variant=\"h5\">Rs. {val}</Typography></TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell><Typography color=\"secondary\" variant=\"h5\">GST @ 5%</Typography></TableCell>\r\n                        <TableCell><Typography color=\"primary\" variant=\"h5\">Rs. {ccyFormat(val)}</Typography></TableCell>\r\n                    </TableRow>\r\n                    <TableRow>\r\n                        <TableCell><Typography color=\"secondary\" variant=\"h5\">Total</Typography></TableCell>\r\n                        <TableCell><Typography color=\"primary\" variant=\"h5\">Rs. {ccyFormat(val)+val}</Typography></TableCell>\r\n                    </TableRow>\r\n                    </TableBody>\r\n                </Table>\r\n                </TableContainer>\r\n                {isValid ? \r\n                    <Button style={{marginLeft:\"50%\", marginTop:\"2%\" }} onClick={()=>{setRenderPay(true); { localStorage.setItem(\"total\",Math.ceil(1.05*val)) } }} variant=\"contained\">Pay</Button>\r\n                    : <Button style={{marginLeft:\"50%\", marginTop:\"2%\" }} variant=\"contained\" disabled>Pay</Button>\r\n                }\r\n            </div>\r\n        </div>\r\n        </div>\r\n    );\r\n    \r\n    else\r\n    return(\r\n        <div className=\"main\">\r\n        <div className=\"homeRow\">\r\n            <div className=\"homeCol\">\r\n                <OrderMenu allowClick={false} refresh={handleRefresh} table={localStorage.getItem(\"table\")} />\r\n            </div>\r\n            <div className=\"homeCol\">\r\n            <Pay />\r\n\r\n            </div>\r\n        </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Order;",{"ruleId":null,"fatal":true,"severity":2,"message":"91","line":9,"column":4},{"ruleId":"92","replacedBy":"93"},{"ruleId":"94","replacedBy":"95"},{"ruleId":"96","severity":1,"message":"97","line":26,"column":8,"nodeType":"98","endLine":26,"endColumn":10,"suggestions":"99"},{"ruleId":"92","replacedBy":"100"},{"ruleId":"94","replacedBy":"101"},{"ruleId":"92","replacedBy":"102"},{"ruleId":"94","replacedBy":"103"},{"ruleId":"96","severity":1,"message":"104","line":134,"column":8,"nodeType":"98","endLine":134,"endColumn":21,"suggestions":"105"},{"ruleId":"106","severity":1,"message":"107","line":170,"column":37,"nodeType":"108","messageId":"109","endLine":170,"endColumn":39},{"ruleId":"110","severity":1,"message":"111","line":194,"column":68,"nodeType":"112","endLine":194,"endColumn":84},{"ruleId":"92","replacedBy":"113"},{"ruleId":"94","replacedBy":"114"},{"ruleId":"110","severity":1,"message":"111","line":230,"column":15,"nodeType":"112","endLine":230,"endColumn":31},{"ruleId":"96","severity":1,"message":"115","line":33,"column":8,"nodeType":"98","endLine":33,"endColumn":15,"suggestions":"116"},{"ruleId":"106","severity":1,"message":"107","line":69,"column":33,"nodeType":"108","messageId":"109","endLine":69,"endColumn":35},{"ruleId":"117","severity":1,"message":"118","line":182,"column":107,"nodeType":"119","messageId":"120","endLine":182,"endColumn":160},"Parsing error: Unexpected token\n\n   7 | import theme from './theme';\n   8 | \n>  9 | if()\n     |    ^\n  10 | ReactDOM.render(\n  11 |   <ThemeProvider theme={theme}>\n  12 |     <App />","no-native-reassign",["121"],"no-negated-in-lhs",["122"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'menus'. Either include it or remove the dependency array.","ArrayExpression",["123"],["121"],["122"],["121"],["122"],"React Hook useEffect has missing dependencies: 'props.capacity' and 'props.shouldAllowSelect'. Either include them or remove the dependency array. If 'setShouldAllowSelect' needs the current value of 'props.shouldAllowSelect', you can also switch to useReducer instead of useState and read 'props.shouldAllowSelect' in the reducer.",["124"],"array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",["121"],["122"],"React Hook React.useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["125"],"no-lone-blocks","Nested block is redundant.","BlockStatement","redundantNestedBlock","no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},"Update the dependencies array to be: [menus]",{"range":"132","text":"133"},"Update the dependencies array to be: [props.capacity, props.shouldAllowSelect, shouldFetch]",{"range":"134","text":"135"},"Update the dependencies array to be: [id, props]",{"range":"136","text":"137"},[1025,1027],"[menus]",[4657,4670],"[props.capacity, props.shouldAllowSelect, shouldFetch]",[1201,1208],"[id, props]"]